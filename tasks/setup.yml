---
- file: path=/etc/tinc/{{ tinc_netname }}/hosts state=directory mode=0755 recurse=true

# Setup the main tinc.conf
- template: src=tinc.conf.j2 dest="/etc/tinc/{{ tinc_netname }}/tinc.conf" mode=0644
  notify: restart_tinc

# Install the static binary if available
- unarchive: src=tinc-{{ ansible_architecture }}.tar.gz dest=/etc/tinc/ mode=0755
  when: tinc_static_binary
  ignore_errors: yes
- file: src="/etc/tinc/bin/tincd" dest="/usr/local/bin/tincd" state=link
  when: tinc_static_binary
  ignore_errors: yes

- stat: path=/etc/tinc/bin/tincd
  register: tinc_binary_installed

# Install the tinc package from repo if available
- apt: name=tinc state=installed
  when: not tinc_static_binary or not tinc_binary_installed.stat.exists

# This sets up the original keys and copies it to a default location for later use
# /etc/tinc/{{ tinc_netname }}/rsa_key.pub and /etc/tinc/{{ tinc_netname }}/rsa_key.priv
- shell: |
    tincd -n {{ tinc_netname }} -K4096 -c /etc/tinc/{{ tinc_netname }} &&
    cp -p /etc/tinc/{{ tinc_netname }}/hosts/{{ ansible_hostname }} /etc/tinc/{{ tinc_netname }}/rsa_key.pub
  args:
    creates: "/etc/tinc/{{ tinc_netname }}/rsa_key.priv"

# Make directories to figure out the ip addresses and keys to distribute
- file: path={{ tinc_tmpdir }}/{{ tinc_netname }}/pubkeys state=directory recurse=true 
  delegate_to: localhost
  run_once: true
  become: false
- file: path={{ tinc_tmpdir }}/{{ tinc_netname }}/ip state=directory recurse=true 
  delegate_to: localhost
  run_once: true
  become: false
- file: path={{ tinc_tmpdir }}/{{ tinc_netname }}/current state=directory recurse=true 
  delegate_to: localhost
  run_once: true
  become: false

# Fetch the ip addresses and keys from the hosts
- fetch: src=/etc/tinc/{{ tinc_netname }}/ansible_ipaddress dest={{ tinc_tmpdir }}/{{ tinc_netname }}/ip/{{ ansible_hostname }} flat=yes
  ignore_errors: yes
- fetch: src=/etc/tinc/{{ tinc_netname }}/rsa_key.pub dest={{ tinc_tmpdir }}/{{ tinc_netname }}/pubkeys/{{ ansible_hostname }} flat=yes
  ignore_errors: yes

# Set an ipaddress for each host in set if they don't have already
- script: setip.py {{ tinc_tmpdir }}/{{ tinc_netname }}/pubkeys {{ tinc_tmpdir }}/{{ tinc_netname }}/ip {{ tinc_subnet }}
  tags: test
  register: ip_output
  become: false
  delegate_to: localhost

- template: src=host_configuration.j2 dest="{{ tinc_tmpdir }}/{{ tinc_netname }}/current/{{ ansible_hostname }}"
  tags: test
  become: false
  delegate_to: localhost

- debug: var=ip_output
  tags: test

- template: src=tinc-up.j2 dest="/etc/tinc/{{ tinc_netname }}/tinc-up" mode=0755
  notify: restart_tinc

- template: src=tinc-down.j2 dest="/etc/tinc/{{ tinc_netname }}/tinc-down" mode=0755
  notify: restart_tinc

# Store the ipaddress for the host which was generated by setip.py
- copy: src="{{ tinc_tmpdir}}/{{ tinc_netname }}/ip/{{ ansible_hostname }}" dest="/etc/tinc/{{ tinc_netname }}/ansible_ipaddress"

- copy: src="{{ tinc_tmpdir }}/{{ tinc_netname }}/current/" dest="/etc/tinc/{{ tinc_netname }}/hosts/"
  notify: restart_tinc

# setup runit
- file: path=/etc/tinc/{{ tinc_netname }}/runit/log state=directory recurse=true
- file: path=/var/log/tinc_{{ tinc_netname }}/ state=directory mode=0755
- copy: dest="/etc/tinc/{{ tinc_netname }}/runit/run" mode=0755 content="#!/bin/sh\nexport PATH=/etc/tinc/bin:$PATH\nexec 2>&1\nexec tincd -n {{ tinc_netname }} -c /etc/tinc/{{ tinc_netname }} --pidfile=/etc/tinc/{{ tinc_netname }}/runit/pid -D"
  notify: restart_tinc
- copy: dest="/etc/tinc/{{ tinc_netname }}/runit/log/run" mode=0755 content="#!/bin/sh\nexec svlogd -tt /var/log/tinc_{{ tinc_netname }}"
  notify: restart_tinc
- file: src="/etc/tinc/{{ tinc_netname }}/runit" dest="/etc/service/tinc_{{ tinc_netname }}" state=link

- wait_for: path=/proc/sys/net/ipv4/conf/{{ tinc_netname }}/forwarding
- wait_for: path=/etc/tinc/{{ tinc_netname }}/runit/pid

- name: Re-execute setup
  setup:
  tags: hostsfile

- name: "Build hosts file"
  lineinfile: dest=/etc/hosts regexp='.*{{ hostvars[item]['ansible_hostname'] }}.{{ tinc_netname }}$' line="{{ hostvars[item]['ansible_' + tinc_netname]['ipv4']['address'] }} {{ hostvars[item]['ansible_hostname'] }}.{{ tinc_netname }}" state=present
  with_items: "{{ play_hosts }}"
  tags: hostsfile

# Delete the temporary directory
- file: dest="{{ tinc_tmpdir }}/{{ tinc_netname }}" state=absent
  delegate_to: localhost
  become: false
  run_once: true
